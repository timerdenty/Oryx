import pandas as pd
import streamlit as st
# from st_aggrid import AgGrid
import plotly.express as px


st.header('–ü–æ—Ç–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –£–∫—Ä–∞–∏–Ω–æ-—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –≤–æ–π–Ω–µ')
st.subheader('–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≥—Ä—É–ø–ø–æ–π Oryx –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–ª–µ–π –±–æ—è')
st.caption("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—É—â–µ—Å—Ç–≤–ª—è–ª—Å—è —Å 24.02.2022 –ø–æ 04.09.2022")

losses_russia_row = pd.read_csv('losses_russia.csv')
losses_ukraine_row = pd.read_csv('losses_ukraine.csv')

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
losses_russia = losses_russia_row.fillna(0)
losses_ukraine = losses_ukraine_row.fillna(0)
losses_russia['manufacturer'] = losses_russia['manufacturer'].str.replace('the ', '')
losses_ukraine['manufacturer'] = losses_ukraine['manufacturer'].str.replace('the ', '')
losses_ukraine['manufacturer'] = losses_ukraine['manufacturer'].str.replace('%281794%E2%80%931815%2C 1830%E2%80%931974%2C 2020%E2%80%93present%29', '')
losses_ukraine['manufacturer'] = losses_ukraine['manufacturer'].str.replace('%28converted%29', '')

tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ", "C—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏", "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"])

with tab1:

    st.subheader('–ü–æ—Ç–µ—Ä–∏ –£–∫—Ä–∞–∏–Ω—ã')
    col1, col2, col3 = st.columns(3)
    col1.metric('–í—Å–µ–≥–æ –ø–æ—Ç–µ—Ä—è–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏', sum(losses_ukraine['losses_total']), delta=None, delta_color="normal", help=None)
    st.text('–≤ —Ç–æ–º —á–∏—Å–ª–µ:')
    col1, col2, col3 = st.columns(3)
    col1.metric('–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ', sum(losses_ukraine['destroyed'].astype(int)),
                delta='(' + str(round(sum(losses_ukraine['destroyed'].astype(int)) / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off",
                help=None)
    col2.metric('–ó–∞—Ö–≤–∞—á–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º', sum(losses_ukraine['captured'].astype(int)),
                delta='(' + str(round(sum(losses_ukraine['captured'].astype(int)) / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col3.metric('–ë—Ä–æ—à–µ–Ω–æ', sum(losses_ukraine['abandoned'].astype(int)),
                delta='(' + str(round(sum(losses_ukraine['abandoned'].astype(int)) / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col1.metric('–ó–∞—Ö–≤–∞—á–µ–Ω–æ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ', sum(losses_ukraine['captured and destroyed'].astype(int)),
                delta='(' + str(round(sum(losses_ukraine['captured and destroyed'].astype(int)) / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col2.metric('–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ', sum(losses_ukraine['damaged'].astype(int)),
                delta='(' + str(round(sum(losses_ukraine['damaged'].astype(int)) / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    drone = (sum(losses_ukraine['sunk'].astype(int))) + (sum(losses_ukraine['sunk but raised by Russia'].astype(int)))

    losses_ukraine_from_drons = sum(losses_ukraine['damaged by Forpost-R']
                                    + losses_ukraine['damaged by Orion and captured']
                                    + losses_ukraine['destroyed by Forpost-R']
                                    + losses_ukraine['destroyed by Orion']
                                    + losses_ukraine['destroyed by loitering munition'])

    col3.metric('–ü–æ—Ç–µ—Ä–∏ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –¥—Ä–æ–Ω–æ–≤', int(losses_ukraine_from_drons),
                delta='(' + str(round(losses_ukraine_from_drons / sum(losses_ukraine['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    st.info('–≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω % –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Ç–µ—Ä—å')

    st.subheader('–ü–æ—Ç–µ—Ä–∏ —Ä–æ—Å—Å–∏–∏')
    col1, col2, col3 = st.columns(3)
    col1.metric('–í—Å–µ–≥–æ –ø–æ—Ç–µ—Ä—è–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏', sum(losses_russia['losses_total']), delta=None, delta_color="normal", help=None)
    st.text('–≤ —Ç–æ–º —á–∏—Å–ª–µ:')
    col1, col2, col3 = st.columns(3)
    col1.metric('–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ', sum(losses_russia['destroyed'].astype(int)),
                delta='(' + str(round(sum(losses_russia['destroyed'].astype(int)) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col2.metric('–ó–∞—Ö–≤–∞—á–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º', sum(losses_russia['captured'].astype(int)),
                delta='(' + str(round(sum(losses_russia['captured'].astype(int)) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col3.metric('–ë—Ä–æ—à–µ–Ω–æ', sum(losses_russia['abandoned'].astype(int)),
                delta='(' + str(round(sum(losses_russia['abandoned'].astype(int)) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col1.metric('–ó–∞—Ö–≤–∞—á–µ–Ω–æ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ', sum(losses_russia['captured and destroyed'].astype(int)),
                delta='(' + str(round(sum(losses_russia['captured and destroyed'].astype(int)) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)
    col2.metric('–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ', sum(losses_russia['damaged'].astype(int)),
                delta='(' + str(round(sum(losses_russia['damaged'].astype(int)) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)

    losses_russia_from_drons = sum(losses_russia['damaged by Bayraktar TB2']
                                   + losses_russia['destroyed by Bayraktar TB2']
                                   + losses_russia['destroyed by Bayraktar TB2 and Harpoon AShM'])

    col3.metric('–ü–æ—Ç–µ—Ä–∏ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –¥—Ä–æ–Ω–æ–≤', int(losses_russia_from_drons),
                delta='(' + str(round(int(losses_russia_from_drons) / sum(losses_russia['losses_total']) * 100, 2)) + '%)',
                delta_color="off", help=None)

    st.info('–≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω % –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Ç–µ—Ä—å')


with tab2:
    st.subheader('–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏')

    losses_russia_final = losses_russia.groupby(['manufacturer'])['losses_total'].sum()
    losses_ukraine_final = losses_ukraine.groupby(['manufacturer'])['losses_total'].sum()

    losses_russia.loc[losses_russia['losses_total'] <= 1, 'manufacturer'] = 'Other countries' # Represent only large countries
    fig = px.pie(losses_russia, values='losses_total', names='manufacturer', title='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π  —Ä–æ—Å—Å–∏–µ–π',
                 color_discrete_map={'Soviet Union': 'red',
                                     'Russia': 'blue'}
                 )
    st.write(fig)
    losses_ukraine.loc[losses_ukraine['losses_total'] <= 1, 'manufacturer'] = 'Other countries' # Represent only large countries
    fig2 = px.pie(losses_ukraine, values='losses_total', names='manufacturer', title='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π –£–∫—Ä–∞–∏–Ω–æ–π',
                  color='losses_total',
                  color_discrete_map={'Soviet Union': 'red',
                                      'Ukraine': 'blue',}
                  )
    st.write(fig2)

    col1, col2 = st.columns(2)

    col1.subheader('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (—Ä–æ—Å—Å–∏—è)')
    col1.table(losses_russia_final.sort_values(ascending=False))

    col2.subheader('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (–£–∫—Ä–∞–∏–Ω–∞)')
    col2.table(losses_ukraine_final.sort_values(ascending=False))


with tab3:
    losses_russia_by_category = losses_russia[['equipment', 'losses_total']]
    losses_russia_by_category = losses_russia_by_category.groupby('equipment')['losses_total'].sum()
    losses_russia_by_category = pd.DataFrame(losses_russia_by_category)
    losses_russia_by_category = losses_russia_by_category.reset_index(['equipment'])

    losses_ukraine_by_category = losses_ukraine[['equipment', 'losses_total']]
    losses_ukraine_by_category = losses_ukraine_by_category.groupby(['equipment'])['losses_total'].sum()
    losses_ukraine_by_category = pd.DataFrame(losses_ukraine_by_category)
    losses_ukraine_by_category = losses_ukraine_by_category.reset_index(['equipment'])

    col1, col2 = st.columns(2)
    col1.subheader('–ü–æ—Ç–µ—Ä–∏ —Ä–æ—Å—Å–∏–∏ –ø–æ –≤–∏–¥–∞–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π')
    col1.table(losses_russia_by_category)
    col2.subheader('–ü–æ—Ç–µ—Ä–∏ –£–∫—Ä–∞–∏–Ω—ã –ø–æ –≤–∏–¥–∞–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π')
    col2.table(losses_ukraine_by_category)


with tab4:
    st.subheader('–ü–æ—Ç–µ—Ä–∏ —Ä–æ—Å—Å–∏–∏ ')
    st.table(losses_russia_row)
    st.subheader('–ü–æ—Ç–µ—Ä–∏ –£–∫—Ä–∞–∏–Ω—ã')
    st.table(losses_ukraine_row)